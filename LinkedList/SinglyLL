public class LinkedList {

    public static class Node{
        int data;
        Node next;

        public Node(int data){
            this.data= data;
            this.next= null;
        }
    }

        public static Node head;
        public static Node tail;
        public static int size;


        //Add a node in a ll
        public void addFirst(int data){
            //step1- create new node
            Node newNode= new Node(data);
            size++;
            //when ll is empty
            if(head== null){
                head= tail= newNode;
                return;
            }

            //Step2- newNode.next= head --- linking
            newNode.next= head;

            //Step3- head= newNode
            head= newNode;
        }

        public void addLast(int data){
            //Step1- craete a new node
            Node newNode= new Node(data);
            size++;
            if(head==null){
                head= tail= newNode;
                return;
            }

            //step2- tails's next= newnode
            tail.next= newNode;

            //Step3- tail= newNode
            tail= newNode;
        }

        public void print(){
            Node temp= head;
            while(temp!= null){
                System.out.print(temp.data+"->");
                temp= temp.next;
            }
            System.out.println("null");
        }

        public void addInTheMiddle(int idx, int data){
            if(idx==0){
                addFirst(data);
                return;
            }
            Node newNode= new Node(data);
            size++;
            Node temp= head;
            int i=0;
            while(i<idx-1){
                temp= temp.next;
                i++;
            }

            newNode.next= temp.next;
            temp.next= newNode;

        }
    
        //REMOVING NODE FROM LL
        public int removeFirst(){
            if(size==0){
                System.out.print("LL is empty");
                return Integer.MIN_VALUE;
            }
            else if(size==1){
                int val= head.data;
                head= tail= null;
                size=0;
                return val;
            }
            int val= head.data;
            head= head.next;
            size--;
            return val;
        }

        public int removeLast(){
            if(size==0){
                System.out.print("LL is empty");
                return Integer.MIN_VALUE;
            }
            else if(size==1){
                int val= head.data;
                head= tail= null;
                size=0;
                return val;
            }

            Node prev= head;
            for(int i=0; i<size-2; i++){
                prev= prev.next;
            }
            int val=  prev.next.data;
            prev.next= null;
            tail= prev;
            size--;
            return val; //tail.data
        }

        public int iterativeSearch(int key){
            int i=0;
            Node temp= head;
            while(temp !=null){
                if(temp.data== key){//key found
                    return i;
                }else{
                    temp= temp.next;
                    i++;
                }
            }
            //key not found
            return -1;
        }

        public int RecSearchHelper(Node head, int key){
            if(head == null){
                return -1;
            }
            if(head.data== key){
                return 0;
            }
            int idx= RecSearchHelper(head.next, key);
            if(idx==-1) return -1;

            return idx+1;

        }
        public int recSearch(int key){
            return RecSearchHelper(head, key);
        }

        //REVERSING A LL
        public void reverse(){
            Node prev= null;
            Node curr= tail= head;
            Node next;

            while(curr != null){
                next= curr.next;
                curr.next= prev;
                prev= curr; 
                curr= next;
            }
            head= prev;
        }

        //Delete nth node from end
        public void deleteNthFromEnd(int n){
            int sz= 0;
            Node temp= head;
            while(temp != null){
                temp= temp.next;
                sz++;
            }

            if(n== sz){// n== head= first node
                head= head.next;
                return;
            }

            //sz-n...just prior to the node to be deleted
            int i=1;
            int iToFind= sz-n;
            Node prev= head;
            while(i<iToFind){
                prev= prev.next;
                i++;
            }
            prev.next= prev.next.next;
            return;
        }

        //Slow-fast approach
        //method to find mid of LL
        public Node findmid(Node head){
            Node slow= head;
            Node fast= head;

            while(fast!= null && fast.next !=null){
                slow= slow.next;
                fast= fast.next.next;
            }
            return slow;
        }

        public boolean checkPalindrome(){
            if(head== null || head.next== null) return true;
            //step1- find mid
            Node midNode= findmid(head);

            //step2- reverse half LL
            Node prev= null;
            Node curr= midNode;
            Node next;
            while(curr != null){
                next= curr.next;
                curr.next= prev;
                prev= curr;
                curr= next;
            }
            //step3- check left and right half
            Node right= prev;//head of right half
            Node left= head;
            while(right != null){
                if(left.data != right.data){
                    return false;
                }
                left= left.next;
                right= right.next;
            }
            return true;
        }

        //ZIG-ZAG CONVERTION OF LL
        public void zigzag(){
        //find mid
        Node slow = head;
        Node fast= head.next;

        while(fast!= null && fast.next!= null){
            slow= slow.next;
            fast= fast.next.next;
        }
        Node mid= slow;

        //reverse 2nd half
        Node curr= mid.next;
        Node prev= null;
        Node next;

        while(curr!= null){
            next = curr.next;
            curr.next= prev;
            prev= curr;
            curr= next;

        }
        //zigzag
        Node left= head;
        Node right= prev;
        Node nextL, nextR;

        while(left != null && right != null){
            nextL= left.next;
            left.next= right;
            nextR= right.next;
            right.next= nextL;

            left= nextL;
            right= nextR;
        }
        
        }
        

        //Cycle in a LL
        //Floyid Cycle algorithm
        public static boolean isCycle(){
            Node slow= head;
            Node fast= head;
            while(fast != null && fast.next!= null){
                slow= slow.next;
                fast= fast.next.next;

                if(slow== fast){
                    return true; //cycle exist
                }
            
            }
            return false;//cycle doestn't exist
        }

        //Remove cycle in LL
        public static void removeCycle(){
            Node slow= head;
            Node fast= head;
            boolean isCycle= false;

            //Step1 : detect cycle
            while(fast!= null && fast.next!=null){
                slow= slow.next;
                fast= fast.next.next;
                if(slow == fast){
                    isCycle= true;
                    break;
                }
            }
            if(isCycle== false) return;


            //Step2: finding meeting point
            slow= head;
            Node prev= null;
            while(slow != fast){
                prev=fast;
                slow= slow.next;
                fast= fast.next;
            }
            //Step3: remove cycle
            prev.next= null;
        }


        private Node getMid(Node head){
            Node slow= head;
            Node fast= head.next;

            while(fast!= null && fast.next != null){
                slow= slow.next;
                fast= fast.next.next;
            }
            return slow;
        }

        private Node merge(Node head1, Node head2){

            Node temp= new Node(-1);
            Node curr= temp;

            while(head1!= null && head2!= null){
                if(head1.data <= head2.data){
                    curr.next = head1;
                    head1= head1.next;
                    curr = curr.next;
                } else{
                    curr.next= head2;
                    head2= head2.next;
                    curr = curr.next;
                }
            }

            while(head1 != null){
                curr.next = head1;
                head1= head1.next;
                curr = curr.next;
            }

            while(head2 != null){
                curr.next = head2;
                head2= head2.next;
                curr = curr.next;
            }

            return temp.next;
        }



        //Merge sort on a LL
        public Node mergeSort(Node head ){

            if(head== null || head.next== null){
                return head;
            }

            //find mid
            Node mid= getMid(head);
        
            //left and right merge sort
            Node rightHead= mid.next;
            mid.next= null;
            Node newLeft = mergeSort(head);
            Node newRight = mergeSort(rightHead);

            //merge
            return merge(newLeft, newRight);

        }



    public static void main (String[] args){
        LinkedList ll= new LinkedList();
        ll.addLast(1);
        ll.addLast(2);
        ll.addLast(3);
        ll.addLast(4);
        ll.addLast(5);
        ll.addLast(2);
        ll.addLast(1);
         ll.addInTheMiddle(2, 9);
         ll.print();
       // System.out.println("Size of this linkedlist is: "+ll.size);
       // ll.removeFirst();
       // ll.print();
        //ll.removeLast();
        //ll.print();
        //System.out.println(ll.iterativeSearch(4));
       // System.out.println(ll.iterativeSearch(10));
       // System.out.println(ll.recSearch(4));
       //ll.reverse();
       //ll.print();
       //ll.deleteNthFromEnd(3);
       //System.out.println(ll.checkPalindrome());
    //    head= new Node(1);
    //    Node temp= new Node(2);
    //    head.next= temp;
    //    head.next.next= new Node(3);
    //    head.next.next.next= temp; //true
       //1->2->3->1
    //    System.out.println(isCycle());
    //    removeCycle();
    //    System.out.println(isCycle());
      // ll.head= ll.mergeSort(ll.head);
      ll.zigzag();
       //ll.print();



    }
    
}
