public class DoublyLL{

    private Node head;

    //insert a node at the beginning of LL
    public void insertFirst(int val){
        Node dummy= new Node(val);
        dummy.next= head;
        dummy.prev= null;
        if(head != null){
            head.prev= dummy;
        }
        head= dummy;
    }

    //insert a node at the end of LL
    public void insertLast(int val){
        Node newNode= new Node(val);
        Node last= head;

        if(head == null){
            newNode.prev = null;
            head =  newNode;
        }

        while(last.next != null){
            last= last.next;
        }
        last.next= newNode;
        newNode.prev= last;
    }

    //insert a node at a particular index of LL
    public void insertMiddle(int val, int indx){
        Node temp= head;
        Node newnNode= new Node(val);

        int size = sizeOfLL();

        if(indx == 0){
             insertFirst(val);
        }

        if(indx == size){
            insertLast(val);
        }

        for(int i=1; i< indx; i++){
            temp= temp.next;
        }
        newnNode.prev= temp;
        newnNode.next= temp.next;
        temp.next.prev=newnNode;
        temp.next= newnNode;
    }

    //Insert after the given index
    public void insertAfter(int val, int after){
        Node newNode= new Node(val);
        Node pNode= findNode(after); //pNode = previous node i.e it is the node after which new node will be inserted

        if(pNode == null){
            System.out.println("Doesn't exist");
            return;
        }

        newNode.prev= pNode;
        newNode.next= pNode.next;
        pNode.next= newNode;
        if(newNode.next != null){
            newNode.next.prev= newNode;
        }
    }

    //find a node
    public Node findNode(int val){
        Node node = head;
        while(node != null){
            if(node.val == val){
                return node;
            }
            node= node.next;
        }
        return null;
    }

    //display LL and reverse Display
    public void display(){
        Node dummy = head;
        Node last = null;
        while(dummy != null){
            System.out.print(dummy.val + " -> ");
            last = dummy;
            dummy= dummy.next;
        }
        System.out.println("END");

        while(last != null){
            System.out.print(last.val + " <- ");
            last = last.prev;
        }
        System.out.println("START");
    }

    //find LL size
    public int sizeOfLL(){
        int size =0;
        Node temp = head;
        if(head == null){
            return 0;
        }

        while(temp != null){
            temp = temp.next;
            size++;
        }
        return size;
    }

    //display LL size
    public  void displayLLSize(){
        System.out.println("Size of LL is : " + sizeOfLL());
    }

    private class Node{
        int val;
        Node next;
        Node prev;

        public Node(int val) {
            this.val = val;
        }

        public Node(int val, Node next, Node prev){
            this.val= val;
            this.next= next;
            this.prev= prev;
        }

        

    }
}
